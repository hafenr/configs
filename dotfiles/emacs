
;       ____   __  ___   ___   _____   ____        ___   _____ 
;     / __/  /  |/  /  / _ | / ___/  / __/       / _ \ / ___/
;   / _/   / /|_/ /  / __ |/ /__   _\ \        / , _// /__  
; /___/  /_/  /_/  /_/ |_|\___/  /___/       /_/|_| \___/ 
                                             

;;
;; General
;;

;; Disable icon bar
(tool-bar-mode -1)

;; Change window size
;; (setq initial-frame-alist '((top . 0) (left . 0) (width . 600) (height . 480)))

;; Font size, height is /100
(set-face-attribute 'default nil :height 160)

;; Many binaries are under /usr/local/bin under OSX (brew stuff)
(setq exec-path (append exec-path '("/usr/local/bin")))


;;
;; Initialize ELPA
;;
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
			 ("tromey" . "http://tromey.com/elpa/")))
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))


;;
;; Initialize el-get
;;
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)


;;
;; Vim emulation
;;
(require 'evil)
(evil-mode 1)


;;
;; Color-theme plugin, has to be installed by M-x el-get-install RET color-theme RET
;;
(require 'color-theme)
(color-theme-initialize)
;; (color-theme-molokai)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
(load-theme 'tomorrow-night-bright t)
;; (load-theme 'obsidian t)


;;
;; Install clojure-mode from ELPA if it isn't installed already
;;
;TODO: Do this with all plugins!
(unless (package-installed-p 'clojure-mode)
  (package-refresh-contents)
  (package-install 'clojure-mode))


;;
;; ESS
;;
(require 'ess-site)


;;
;; Load and configure SLIME
;;
;; (add-to-list 'load-path "~/.emacsplugins/slime")
;; (require 'slime)
;; (eval-after-load 'slime '(setq slime-protocol-version 'ignore))
;; (slime-setup '(slime-repl))

;;
;; Load a major mode for editing Clojure code.
;;
(require 'clojure-mode)

;;
;; Activate flexible file matching
;;
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)


;; Set directory to home dir
(setq default-directory "~/")


;;
;; Surround
;;
(add-to-list 'load-path "~/.emacs.d/evil-surround")
(require 'surround)
(global-surround-mode 1)


;;
;; Other plugins
;;
(require 'auto-complete)
(auto-complete-mode 1)
(setq 
      ;; ac-auto-show-menu 1
      ;; ac-candidate-limit nil
      ;; ac-delay 0.1
      ;; ac-disable-faces (quote (font-lock-comment-face font-lock-doc-face))
      ;; ac-ignore-case 'smart
      ;; ac-menu-height 10
      ;; ac-quick-help-delay 1.5
      ;; ac-quick-help-prefer-pos-tip t
      ac-use-quick-help t
)


;;
;; Yasnippet
;;
;; Expand with TAB and Navigate with TAB and S-TAB
(require 'yasnippet)
;; (yas-minor-mode 1)
(yas-global-mode 1)


;; Need to M-x package-install RET dropdown-list RET
(require 'dropdown-list)
(setq yas-prompt-functions '(yas-dropdown-prompt
			     yas-ido-prompt
                             yas-completing-prompt))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-start 1)
 '(ac-delay 0.0)
 '(ac-trigger-key "TAB")
 '(ac-use-menu-map t))


;; Navigate in auto-complete list
(define-key ac-menu-map (kbd "C-n") 'ac-next)
(define-key ac-menu-map (kbd "C-p") 'ac-previous)

;; Save here instead of littering current directory with emacs backup files
(setq backup-directory-alist `(("." . "~/.saves")))


;;
;; CLOJURE
;;
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))

;; Cider
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(setq cider-repl-pop-to-buffer-on-connect t)
(setq cider-popup-stacktraces t)
(setq cider-repl-popup-stacktraces t)
(setq cider-auto-select-error-buffer t)
(setq cider-repl-history-file "~/.emacs.d/cider-history")
(setq cider-repl-wrap-history t)

(add-hook 'cider-repl-mode-hook 'subword-mode)
(add-hook 'cider-repl-mode-hook 'paredit-mode)
(add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Load the paredit-menu after loading paredit
(eval-after-load "paredit.el"
  '(require 'paredit-menu))


;; Projectile is like Vim's CTRLP for emacs
(projectile-global-mode 1)
;; If you want Projectile to be usable in every directory (even without the presence of project file):
(setq projectile-require-project-root nil)


;; Enable ido mode for M-x
(smex-initialize)


;; Load default config for smartparens
(require 'smartparens-config)


;; Install Mu4te
;; http://www.djcbsoftware.nl/code/mu/mu4e.html


;; (add-to-list 'load-path "~/.emacs.d/powerline")
;; (require 'powerline)
;; (powerline-default-theme)
;; (powerline-center-theme)


;; Press C-= to expand the region
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(delete-selection-mode 1)


;; Git plugin
;; Cheathseet with basic commands: http://daemianmack.com/magit-cheatsheet.html
(require 'magit)


;; Starter-kit (I think) overrides this => enable again
(menu-bar-mode 1)


;; Make org-mode available
(require 'org)


;; Enable window numbering mode, all windows are accessible by M-1, M-2, ...
(window-numbering-mode)


;; Some tweaks for Python
(setq
  python-shell-interpreter "ipython"
  python-shell-interpreter-args ""
  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
  python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
  python-shell-completion-setup-code
    "from IPython.core.completerlib import module_completion"
  python-shell-completion-module-string-code
    "';'.join(module_completion('''%s'''))\n"
  python-shell-completion-string-code
    "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")



;; Enable flycheck
;; Use C-c ! n and C-c ! p to navigate between error locations.
(add-hook 'after-init-hook #'global-flycheck-mode)



(require 'helm-config)
(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "C-c o") 'helm-projectile)
(global-set-key (kbd "C-c C-/") 'helm-complete-file-name-at-point)


;;
;; Evil leader
;;
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")


;; Evil nerd commenter
(setq evilnc-hotkey-comment-operator "gc")
(require 'evil-nerd-commenter)


;; ;; Evil keybindings
;; (eval-after-load 'evil
;;   (define-key evil-normal-state-map ",ci" 'evilnc-comment-or-uncomment-lines)
;;   (define-key evil-normal-state-map ",cl" 'evilnc-comment-or-uncomment-to-the-line)
;;   (define-key evil-normal-state-map ",cc" 'evilnc-copy-and-comment-lines)
;;   (define-key evil-normal-state-map ",cp" 'evilnc-comment-or-uncomment-paragraphs)
;;   (define-key evil-normal-state-map ",cr" 'comment-or-uncomment-region))


;; Set keys like this:
(evil-leader/set-key
  "cc" 'evilnc-comment-or-uncomment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "cl" 'evilnc-comment-or-uncomment-to-the-line)


;; Line numbers
(require 'linum)
(global-linum-mode)                     ; Enable line numbers everywhere



;; From: http://wikemacs.org/index.php/Evil#Enter_an_emacs_mode_in_a_given_state
;; C-h m shows the current minor and major mode
(loop for (mode . state) in '((inferior-emacs-lisp-mode . emacs)
                              (inferior-ess-mode . emacs)
                              (nrepl-mode . insert)
                              (undo-tree-visualizer-mode . emacs)
                              (pylookup-mode . emacs)
                              (comint-mode . normal)
                              (shell-mode . insert)
                              (git-commit-mode . insert)
                              (git-rebase-mode . emacs)
                              (term-mode . emacs)
                              (help-mode . emacs)
                              (helm-grep-mode . emacs)
                              (grep-mode . emacs)
                              (bc-menu-mode . emacs)
                              (magit-branch-manager-mode . emacs)
                              (rdictcc-buffer-mode . emacs)
                              (dired-mode . emacs)
                              (wdired-mode . normal))
      do (evil-set-initial-state mode state))


;;
;; smart-mode-line
;;
;; M-x package-install RET smart-mode-line RET
(setq sml/theme 'dark)
(sml/setup)

;; More clear highlighting of active window
(set-face-attribute  'mode-line         ; active
                 nil 
                 :foreground "gray100"
                 :background "gray15" 
                 :box '(:line-width 1 :style released-button))
(set-face-attribute  'mode-line-inactive
                 nil 
                 :foreground "gray25"
                 :background "black"
                 :box '(:line-width 1 :style released-button))

