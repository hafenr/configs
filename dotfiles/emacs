;////////////////////////////////////////////////////////////////////////////////

;                ____   __  ___   ___   _____   ____        ___   _____ 
;              / __/  /  |/  /  / _ | / ___/  / __/       / _ \ / ___/
;            / _/   / /|_/ /  / __ |/ /__   _\ \        / , _// /__  
;          /___/  /_/  /_/  /_/ |_|\___/  /___/       /_/|_| \___/ 

;////////////////////////////////////////////////////////////////////////////////
                                             

;================================================================================
; General
;================================================================================

; Disable icon bar
(tool-bar-mode -1)

; Change window size
; (setq initial-frame-alist '((top . 0) (left . 0) (width . 600) (height . 480)))

; Font size, height is /100
(set-face-attribute 'default nil :height 160)

; Many binaries are under /usr/local/bin under OSX (brew stuff)
(setq exec-path (append exec-path '("/usr/local/bin")))

; Default dir
(setq default-directory "~/")

; Save here instead of littering current directory with emacs backup files
(setq backup-directory-alist `(("." . "~/.saves")))

; Change to other window when splitting
(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))

; Save session on exit
;; (desktop-save-mode 1)

; Close old buffers automatically
(setq midnight-mode 't)

; Make buffer names unique even if the files have the same names
(setq uniquify-buffer-name-style 'forward)

; Alias for C-g
; (global-set-key (kbd "C-[") 'keyboard-quit)

; Enable easy window movement everywhere (evil and emacs)
(windmove-default-keybindings)
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") 'windmove-up)
(global-set-key (kbd "M-l") 'windmove-right)

; Alias for C-g
(global-set-key (kbd "C-[") 'keyboard-quit)

;; (global-set-key [(control ?,)] (lambda () (interactive) (other-window -1)))
;; (global-set-key [(control ?.)] (lambda () (interactive) (other-window 1)))
;================================================================================
; Package management
;================================================================================
; Initialize ELPA
(require 'package)

(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
			 ("tromey" . "http://tromey.com/elpa/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

; All non-built-in packages
(defvar my-elpa-packages '(starter-kit
                           auto-complete
                           clojure-mode
                           clojure-test-mode
                           clojure-snippets
		           cider
                           paredit
                           paredit-menu
                           rainbow-delimiters
                           yasnippet
                           undo-tree
                           window-numbering
                           auctex
                           dropdown-list
                           projectile
                           linum-off
                           helm
                           smex
                           flx-ido
                           expand-region
                           evil
                           surround
                           evil-numbers
                           evil-nerd-commenter
                           evil-leader
                           ido-ubiquitous
                           org
                           org-ac
                           moe-theme
                           obsidian-theme
                           color-theme
                           color-theme-molokai
                           color-theme-solarized
                           magit
                           ac-nrepl
                           ace-jump-mode
                           flycheck
                           helm-flycheck
                           helm-emmet
                           helm-projectile))

(dolist (p my-elpa-packages)
  (when (not (package-installed-p p))
    (package-install p)))

; Initialize el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

(setq my:el-get-packages
      '(
        ess
        ))

(el-get 'sync my:el-get-packages)


;================================================================================
; Sections
;================================================================================

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; ESS - R plugin
;--------------------------------------------------------------------------------
(require 'ess-site)
(add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; SLIME
;--------------------------------------------------------------------------------
; (add-to-list 'load-path "~/.emacsplugins/slime")
; (require 'slime)
; (eval-after-load 'slime '(setq slime-protocol-version 'ignore))
; (slime-setup '(slime-repl))
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Auto Complete
;--------------------------------------------------------------------------------
(auto-complete-mode 1)
(require 'auto-complete-config)
(ac-config-default)

; Otherwise ac will not work with yasnippet someshow
(setq-default ac-sources '(
                           ac-source-yasnippet
                           ac-source-abbrev
                           ac-source-dictionary
                           ac-source-words-in-same-mode-buffers
                           ))

(setq 
      ac-auto-show-menu 1
      ac-show-menu-immediately-on-auto-complete t
      ;; ac-candidate-limit nil
      ;; ac-delay 0.1
      ;; ac-disable-faces (quote (font-lock-comment-face font-lock-doc-face))
      ;; ac-ignore-case 'smart
      ;; ac-menu-height 10
      ;; ac-quick-help-delay 1.5
      ;; ac-quick-help-prefer-pos-tip t
      ac-auto-start 1
      ac-delay 0.0
      ac-trigger-key "TAB"
      ac-use-menu-map t
      ac-use-quick-help t)

; Navigate in auto-complete list
(define-key ac-menu-map (kbd "C-n") 'ac-next)
(define-key ac-menu-map (kbd "C-p") 'ac-previous)
; Disable ENTER
(define-key ac-completing-map [return] nil)
(define-key ac-completing-map "\r" nil)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Yasnippet
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Expand with TAB and Navigate with TAB and S-TAB
; (yas-minor-mode 1)
(eval-after-load "auto-complete"
  '(progn
     (yas-global-mode 1)
     (setq yas-prompt-functions '(yas-dropdown-prompt
                                  yas-ido-prompt
                                  yas-completing-prompt))))
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Clojure, Elisp, etc.
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Clojure mode
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))

; Cider
; Put this into yout leiningen project.clj:
; plugins [[cider/cider-nrepl "0.6.0"]]
;
; or add it globally to ~/.lein/profiles.clj
; Something like this:
; {:user {:plugins [[lein-exec "0.3.3"] [cider/cider-nrepl "0.6.0"]]}}

; When using switch-to-buffer, pressing SPC after the command will
; make the hidden buffers visible.
; They'll always be visible in list-buffers (C-x C-b).
(setq nrepl-hide-special-buffers t)
(setq cider-auto-select-error-buffer t)

(setq cider-repl-pop-to-buffer-on-connect t)
(setq cider-popup-stacktraces t)
(setq cider-repl-popup-stacktraces nil)
(setq cider-auto-select-error-buffer t)
(setq cider-repl-history-file "~/.emacs.d/cider-history")
(setq cider-repl-wrap-history t)

(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)

(add-hook 'cider-repl-mode-hook 'subword-mode)
(add-hook 'cider-repl-mode-hook 'paredit-mode)
(add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)

; Paredit, enable for all lisps
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
(add-hook 'clojure-mode-hook          #'enable-paredit-mode)

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Projectile (Vim's CTRLP for emacs)
;--------------------------------------------------------------------------------
(projectile-global-mode 1)
; If you want Projectile to be usable in every directory (even without the presence of project file):
(setq projectile-require-project-root nil)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Fuzzy matching
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Activate flexible file matching
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-use-faces nil) ; Disable ido faces to see flx highlights
; Enable improved ido mode for M-x
(smex-initialize)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Mu4te
;--------------------------------------------------------------------------------
; http://www.djcbsoftware.nl/code/mu/mu4e.html
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Smartparents
;--------------------------------------------------------------------------------
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Status bar
;--------------------------------------------------------------------------------
; Power line, (a custom version frm git)
(add-to-list 'load-path "~/.emacs.d/powerline")
(require 'powerline)
(powerline-default-theme)
; (powerline-default-theme)

; Smart-mode-line
; M-x package-install RET smart-mode-line RET
; (setq sml/theme 'respectable)
; (sml/setup)

; More clear highlighting of active window
; (set-face-attribute  'mode-line         ; active
;                  nil 
;                  :foreground "gray50"
;                  :background "gray20" 
;                  :box '(:line-width 1 :style released-button))
; (set-face-attribute  'mode-line-inactive
;                      nil 
;                      :foreground "gray20"
;                      ;; :background "black"
;                      :box '(:line-width 1 :style released-button))
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Expand-region ; press C-= to expand selection
;--------------------------------------------------------------------------------
(global-set-key (kbd "C-=") 'er/expand-region)
(delete-selection-mode 1)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Magit - Git plugin 
;--------------------------------------------------------------------------------
;; Cheathseet with basic commands: http://daemianmack.com/magit-cheatsheet.html
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Starter-kit overrides
;--------------------------------------------------------------------------------
;; Starter-kit (I think) overrides this => enable again
(menu-bar-mode 1)
;; Another override of starter-kit
(remove-hook 'prog-mode-hook 'idle-highlight-mode)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Org
;--------------------------------------------------------------------------------
; Make org-mode available

; For using beamer in org-mode
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

; brew install imagemagick
(setq org-latex-create-formula-image-program 'imagemagick)

;; (add-to-list 'org-export-latex-packages-alist '("" "listings"))
;; org-latex-packages-alist
;; \usepackage[usenames]{color}
;; \usepackage{amsmath}
;; \usepackage[mathscr]{eucal}
;; \usepackage[utf8]{inputenc}
;; \usepackage[T1]{fontenc}
;; % Package fixltx2e omitted
;; \usepackage{graphicx}
;; % Package longtable omitted
;; % Package float omitted
;; % Package wrapfig omitted
;; \usepackage[normalem]{ulem}
;; \usepackage{textcomp}
;; \usepackage{marvosym}
;; \usepackage{wasysym}
;; \usepackage{latexsym}
;; \usepackage{amssymb}
;; % Package amstext omitted
;; % Package hyperref omitted
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Window numbering
;--------------------------------------------------------------------------------
; Enable window numbering mode, all windows are accessible by M-1, M-2, ...
(window-numbering-mode)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Python
;--------------------------------------------------------------------------------
(setq
  python-shell-interpreter "ipython"
  python-shell-interpreter-args ""
  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
  python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
  python-shell-completion-setup-code
    "from IPython.core.completerlib import module_completion"
  python-shell-completion-module-string-code
    "';'.join(module_completion('''%s'''))\n"
  python-shell-completion-string-code
    "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Flycheck
;--------------------------------------------------------------------------------
; Use C-c ! n and C-c ! p to navigate between error locations.
(add-hook 'after-init-hook #'global-flycheck-mode)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Evil
;--------------------------------------------------------------------------------
(evil-mode 1)

; Evil Surround
(add-to-list 'load-path "~/.emacs.d/evil-surround")
(global-surround-mode 1)

; Evil leader
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")

; Evil nerd commenter
(setq evilnc-hotkey-comment-operator "gc")
(require 'evil-nerd-commenter) ; Has to be required here

; Evil keybindings
(eval-after-load "evil"
  ;; (define-key evil-normal-state-map ",ci" 'evilnc-comment-or-uncomment-lines)
  ;; (define-key evil-normal-state-map ",cl" 'evilnc-comment-or-uncomment-to-the-line)
  ;; (define-key evil-normal-state-map ",cc" 'evilnc-copy-and-comment-lines)
  ;; (define-key evil-normal-state-map ",cp" 'evilnc-comment-or-uncomment-paragraphs)
  ;; (define-key evil-normal-state-map ",cr"
  ;; 'comment-or-uncomment-region)
  '(progn
    ;; Emacs-like editing while in insert mode
    (define-key evil-insert-state-map "\C-e" 'end-of-line)
    (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
    (define-key evil-insert-state-map "\C-b" 'evil-backward-char)
    (define-key evil-insert-state-map "\C-d" 'evil-delete-char)
    (define-key evil-insert-state-map "\C-n" 'evil-next-line)
    (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
    (define-key evil-insert-state-map "\C-k" 'kill-line)
    )
  )

; Set keys like this:
(evil-leader/set-key
  "b" 'ido-switch-buffer
  "cc" 'evilnc-comment-or-uncomment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "p" 'helm-mini
  ";" 'smex
  "cl" 'evilnc-comment-or-uncomment-to-the-line)

; From: http://wikemacs.org/index.php/Evil#Enter_an_emacs_mode_in_a_given_state
; C-h m shows the current minor and major mode
(loop for (mode . state) in '((inferior-emacs-lisp-mode . emacs)
                              (inferior-ess-mode . emacs)
                              (nrepl-mode . emacs)
                              (cider-repl-mode . emacs)
                              (undo-tree-visualizer-mode . emacs)
                              (pylookup-mode . emacs)
                              (comint-mode . normal)
                              (shell-mode . emacs)
                              (git-commit-mode . insert)
                              (git-rebase-mode . emacs)
                              (term-mode . emacs)
                              (help-mode . emacs)
                              (helm-grep-mode . emacs)
                              (grep-mode . emacs)
                              (bc-menu-mode . emacs)
                              (magit-branch-manager-mode . emacs)
                              (rdictcc-buffer-mode . emacs)
                              (dired-mode . emacs)
                              (wdired-mode . normal))
      do (evil-set-initial-state mode state))

; https://github.com/tarao/evil-plugins
(add-to-list 'load-path "~/.emacs.d/evil-plugins")
(define-key evil-ex-completion-map (kbd "C-r") #'evil-ex-paste-from-register)

(global-set-key (kbd "C-SPC") #'ace-jump-line-mode)
(global-set-key (kbd "M-SPC") #'ace-jump-word-mode)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Helm
;--------------------------------------------------------------------------------
(helm-mode t)
(recentf-mode t)

(evil-define-key 'normal global-map
  "\C-p" 'helm-mini
  "q:" 'helm-complex-command-history)

(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "C-c o") 'helm-projectile)
(global-set-key (kbd "C-c C-/") 'helm-complete-file-name-at-point)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Better line numbers
;--------------------------------------------------------------------------------
; Disable linum on starred buffers 
(require 'linum-off)                    ; Needs to be imported here
(global-linum-mode)                     ; Enable line numbers everywhere
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Color-theme
;--------------------------------------------------------------------------------
; Color-theme plugin, has to be installed by M-x el-get-install RET color-theme RET
(color-theme-initialize)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
; (color-theme-molokai)
; (load-theme 'tomorrow-night-bright t)
; (load-theme 'obsidian t)

(require 'moe-theme) ; autoload doesn't work with this somehow
(moe-dark)
(setq moe-theme-mode-line-color 'green)
(powerline-moe-theme)
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("fc55a921b2c1d24233b678d133b9899e03144877d558cf6807ed51f83459d2d9" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
