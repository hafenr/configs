snippet todo "A structured todo comment" !b
# TODO: ${1:description}
#	- ${2:first bullet point}
#	`date +"%d.%m.%y"`
endsnippet

snippet docf "Autodoc block for function" b
"""${1:Summary line.

Extended description of function.}

Parameters
----------
${2:arg1 : type
	Description of arg1.}

Returns
-------
${3:Type of return value
	Description of return value.}

${4:Raises
------
Exception type
	Reason for exception.
}

"""
${0}
endsnippet

snippet docl "Autodoc block for class" b
"""${1:Summary line.

Extended description of class.}

Attributes
----------
${2:attr1 : type
	Description of attr1}

"""
${0}
endsnippet

snippet docm "Autodoc block for module" b
"""
${1:Summary line

Extended description.}

"""
${0}
endsnippet

snippet qtpdb "PDB for QT" b
from PyQt4.QtCore import pyqtRemoveInputHook
from pdb import set_trace
pyqtRemoveInputHook()
set_trace()
endsnippet

snippet argparse "Skeleton for argparse" b
import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                    help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the integers (default: find the max)')

args = parser.parse_args()
endsnippet

snippet skip "Mark a pytest test as being skipped" b
@pytest.mark.skipif(True, reason='Not implemented')
endsnippet
