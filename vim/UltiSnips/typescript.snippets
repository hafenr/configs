snippet desc "Jasmine Test" b
describe('${1:Feature XY}', () => {
	it('${2:should....}', () => {
		$0
	});
});
endsnippet

snippet it "It should..." b
it('${2:should....}', () => {
	$0
});
endsnippet

snippet clfac "AngularJS TypeScript factory" b
class ${1:MyClass}Factory {
	static $inject = ['$injector'];
	constructor(private $injector: ng.auto.IInjectorService) {}
	create(${2:arg1: T1, arg2: T2}) {
		return new $1(this.$injector`!p
if not t[2]:
	snip.rv = ''
else:
	parts = t[2].split(',')
	argnames = [part.split(':')[0] for part in parts]
	argnames = [name.strip() for name in argnames]
	argnames_separated = ', '.join(argnames)
	snip.rv = ', ' + argnames_separated
	`);
	}
}
angular.module('${3:app}').service('${1/\w/\l$0/}Factory', $1Factory);
endsnippet

snippet spec "AngularJS spec skeleton (TS)" b
var $injector;

describe('${1:In class XY}', function() {
	beforeEach(module('${2:app}'));

	beforeEach(inject(function(_$injector_) {
		$injector = _$injector_;
	}));

	$0
});
endsnippet

snippet tsctrl "TypeScript angular controller" b
classs ${1:Something}Ctrl {
	static $inject = ['$scope'];

	constructor(private $scope: ng.IScope) {
		$0
	}
}
endsnippet
